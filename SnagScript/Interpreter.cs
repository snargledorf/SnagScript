/*
 * Copyright (c) 2008 Cameron Zemek
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;

using SnagScript.BuiltInTypes;
using SnagScript.ParserNodes;
using System.Text;

namespace SnagScript
{

    /**
     * Interpreter directly evaluates the abstract syntax tree generated by the
     * Parser. It checks the semantics as it process the tree.
     *
     * @author <a href="mailto:grom@zeminvaders.net">Cameron Zemek</a>
     */
    public class Interpreter
    {
        Scope scope = new Scope();

        public List<Function> CustomFunctions { get; private set; }

        /*
         * Setup interpreter with empty symbol table
         * and register built-in functions.
         */
        public Interpreter()
        {
            CustomFunctions = new List<Function>();

            // Register built-in functions
            scope.SetFunction(new PrintFunction());
            scope.SetFunction(new PrintLineFunction());
            scope.SetFunction(new LenFunction());
            scope.SetFunction(new PauseFunction());
            scope.SetFunction(new ParseIntFunction());
            scope.SetFunction(new ParseFloatFunction());
            scope.SetFunction(new ReadLineFunction());
            scope.SetFunction(new ClearScreenFunction());
            scope.SetFunction(new ReadKeyFunction());
        }

        /**
         * Evaluate script
         *
         * @param script The script to evaluate
         * @return The exit status
         * @throws IOException
         */
        public JavaScriptObject Execute(String script)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                byte[] stringBytes = Encoding.ASCII.GetBytes(script);
                ms.Write(stringBytes, 0, stringBytes.Length);
                ms.Position = 0;
                return Execute(ms);
            }
        }

        /**
         * Evaluate script
         *
         * @param reader The reader that contains the script
         * @return The exit status
         * @throws IOException
         */
        public JavaScriptObject Execute(Stream stream)
        {
            foreach (Function customFunction in CustomFunctions)
            {
                this.scope.SetFunction(customFunction);
            }

            Lexer lexer = new Lexer(stream);
            Parser parser = new Parser(lexer);
            ScriptExecutable executable = parser.Parse();
            return executable.Run(scope);
        }
    }
}